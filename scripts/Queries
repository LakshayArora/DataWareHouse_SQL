/*
===========================================
📄 FILE: gold_layer_analytics.sql
📊 PURPOSE: Business Analytics & Reporting Queries using Gold Layer Views
📁 LAYER: Gold (Presentation / Reporting Layer)

🔍 DESCRIPTION:
This script performs advanced SQL analytics on the Gold Layer views of the data warehouse. It extracts business insights using dimensional modeling and aggregation techniques across customers, products, and sales data.

✅ INCLUDED ANALYTICS:

1. 🌍 Descriptive Analytics
   - Distinct countries, product categories, and customer demographics
   - Earliest and latest order timelines
   - Youngest and oldest customer identification

2. 📊 KPI & Metric Reporting
   - Total sales, item count, average price, total orders/products/customers
   - Distribution of customers by country and gender
   - Revenue by category, product, and customer

3. 📈 Time-Based Analysis
   - Monthly sales trends
   - Cumulative sales and price tracking
   - Year-over-year product performance with benchmarks and trends

4. 🧩 Segmentation & Ranking
   - Product segmentation by cost range
   - Customer segmentation (New, Regular, VIP)
   - Top 5 revenue-generating products
   - Contribution to total sales by category (part-to-whole)

5. 🧾 Report View: `gold.customer_report`
   - Combines sales, demographic, and behavior data into a unified customer report
   - Includes age brackets, order recency, average order value, and loyalty tier

🎯 OUTPUT:
This file delivers deep business intelligence and behavioral insights ready to power dashboards, strategic reports, and customer segmentation initiatives.

Author: Lakshay Arora

===========================================
*/


---- 📊 Analytics Queries on Gold Layer ----

-- 🔍 List of all distinct countries where customers come from
SELECT DISTINCT	
	Country
FROM gold.dim_customers;
GO

-- 🔍 Explore all unique categories and subcategories in the product range
SELECT DISTINCT
	Category,
	Subcategory,
	Product_name
FROM gold.dim_products;
GO

-- 🕰️ Identify earliest and latest order dates, and range in years
SELECT 
	MIN(Order_date) AS First_order,
	MAX(Order_date) AS Last_order,
	DATEDIFF(YEAR, MIN(Order_date), MAX(Order_date)) AS Order_range_years
FROM gold.fact_sales;
GO

-- 👤 Find youngest and oldest customers by birthdate and age
SELECT
	MIN(Birthdate) AS Oldest_customer_bdate,
	DATEDIFF(YEAR, MIN(Birthdate), GETDATE()) AS Oldest_customer,
	MAX(Birthdate) AS Youngest_customer_bdate,
	DATEDIFF(YEAR, MAX(Birthdate), GETDATE()) AS Youngest_customer
FROM gold.dim_customers;
GO


------ 📈 Big Picture KPIs ------

-- 🚀 Core business performance metrics
SELECT 'Total Sales' AS Measure_Name, SUM(Sales) AS Measure_Value FROM gold.fact_sales
UNION ALL
SELECT 'Total Items', SUM(Quantity) FROM gold.fact_sales
UNION ALL
SELECT 'Average Selling Price', AVG(Price) FROM gold.fact_sales
UNION ALL
SELECT 'Total Orders', COUNT(DISTINCT Order_number) FROM gold.fact_sales
UNION ALL
SELECT 'Total Products', COUNT(DISTINCT Product_key) FROM gold.dim_products
UNION ALL
SELECT 'Total_Customers', COUNT(DISTINCT Customer_key) FROM gold.dim_customers
UNION ALL
SELECT 'Total_Customers_Ordered', COUNT(DISTINCT Customer_key) FROM gold.fact_sales;
GO


------ 🔎 Measure Distribution by Dimension ------

-- 🧑‍🤝‍🧑 Total customers by country
SELECT 
	Country,
	COUNT(DISTINCT Customer_key) AS Total_Customers
FROM gold.dim_customers
GROUP BY Country
ORDER BY Total_Customers DESC;

-- 👥 Total customers by gender
SELECT 
	Gender,
	COUNT(DISTINCT Customer_key) AS Total_Customers
FROM gold.dim_customers
GROUP BY Gender
ORDER BY Total_Customers DESC;

-- 📦 Total products by category
SELECT 
	Category,
	COUNT(Product_key) AS Total_Products
FROM gold.dim_products
GROUP BY Category
ORDER BY Total_Products DESC;

-- 💸 Average cost by product category
SELECT 
	Category,
	AVG(Cost) AS Average_Cost
FROM gold.dim_products
GROUP BY Category
ORDER BY Average_Cost DESC;

-- 💰 Total revenue by category
SELECT
	p.Category,
	SUM(f.Sales) AS Total_Revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p ON p.product_key = f.product_key
GROUP BY p.Category
ORDER BY Total_Revenue DESC;

-- 👤 Total revenue generated by each customer
SELECT
	c.Customer_key,
	c.First_name + ' ' + c.Last_name AS Customer_Name,
	SUM(f.Sales) AS Total_Revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c ON c.Customer_key = f.Customer_key	
GROUP BY c.Customer_key, c.First_name, c.Last_name
ORDER BY Total_Revenue DESC;
GO

-- 🌎 Revenue distribution across countries
SELECT
	c.Country,
	SUM(f.Sales) AS Total_Revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c ON c.Customer_key = f.Customer_key	
GROUP BY c.Country
ORDER BY Total_Revenue DESC;


------ 🏆 Ranking Analytics ------

-- 🥇 Top 5 revenue-generating products
SELECT *
FROM (
	SELECT 
		p.Product_name,
		SUM(f.Sales) AS Total_Revenue,
		ROW_NUMBER() OVER (ORDER BY SUM(f.Sales) DESC) AS Rankings
	FROM gold.fact_sales f
	LEFT JOIN gold.dim_products p ON p.product_key = f.product_key
	GROUP BY p.Product_name
) t
WHERE Rankings <= 5;


------ 📆 Time-Based Analysis ------

-- 📅 Monthly sales performance overview
SELECT
	FORMAT(Order_date, 'yyyy-MM') AS Order_Date,
	SUM(Sales) AS Total_Sales,
	COUNT(DISTINCT Customer_key) AS Total_Customers,
	SUM(Quantity) AS Total_Quantity
FROM gold.fact_sales
WHERE Order_date IS NOT NULL
GROUP BY FORMAT(Order_date, 'yyyy-MM')
ORDER BY Order_Date DESC;

-- 📈 Running total and average price trend over time (by month)
SELECT
	Order_date,
	Total_sales,
	SUM(Total_sales) OVER (PARTITION BY Order_date ORDER BY Order_date) AS Running_Total_Year,
	AVG(Average_price) OVER (PARTITION BY Order_date ORDER BY Order_date) AS Average_Running_Price
FROM (
	SELECT
		DATETRUNC(MONTH, Order_date) AS Order_date,
		SUM(Sales) AS Total_sales,
		AVG(Price) AS Average_price
	FROM gold.fact_sales
	WHERE Order_date IS NOT NULL
	GROUP BY DATETRUNC(MONTH, Order_date)
) t;


------ 📊 Performance vs Targets ------

-- 📉 Year-over-year product sales compared to average and previous years
WITH YearlySales AS (
	SELECT 
		YEAR(s.Order_date) AS Year,
		pr.Product_name,
		SUM(s.Sales) AS Total_Yearly_Sales
	FROM gold.fact_sales s
	LEFT JOIN gold.dim_products pr ON pr.product_key = s.product_key
	WHERE s.Order_date IS NOT NULL
	GROUP BY YEAR(s.Order_date), pr.Product_name
)
SELECT *,
	AVG(Total_Yearly_Sales) OVER (PARTITION BY Product_name) AS Average_Sales_Throughout,
	Total_Yearly_Sales - AVG(Total_Yearly_Sales) OVER (PARTITION BY Product_name) AS Diff_Average,
	CASE 
		WHEN Total_Yearly_Sales < AVG(Total_Yearly_Sales) OVER (PARTITION BY Product_name) THEN 'Below Average'
		WHEN Total_Yearly_Sales > AVG(Total_Yearly_Sales) OVER (PARTITION BY Product_name) THEN 'Above Average'
		ELSE 'Average'
	END AS Sales_Rating,
	LAG(Total_Yearly_Sales, 1) OVER (PARTITION BY Product_name ORDER BY Year) AS Previous_Year_Sales,
	Total_Yearly_Sales - LAG(Total_Yearly_Sales, 1, 0) OVER (PARTITION BY Product_name ORDER BY Year) AS Diff_Previous,
	CASE 
		WHEN Total_Yearly_Sales < LAG(Total_Yearly_Sales, 1, 0) OVER (PARTITION BY Product_name ORDER BY Year) THEN 'Below Previous'
		WHEN Total_Yearly_Sales > LAG(Total_Yearly_Sales, 1, 0) OVER (PARTITION BY Product_name ORDER BY Year) THEN 'Above Previous'
		ELSE 'Same'
	END AS Sales_Rating2
FROM YearlySales
ORDER BY Product_name;


------ 📐 Part-to-Whole Analytics ------

-- 📊 % contribution of each category to overall revenue
WITH Category_Sales AS (
	SELECT
		p.Category,
		SUM(f.Sales) AS Total_Sales
	FROM gold.fact_sales f
	LEFT JOIN gold.dim_products p ON p.product_key = f.product_key
	GROUP BY p.Category
)
SELECT 
	Category,
	Total_sales,
	SUM(Total_Sales) OVER () AS Overall_Sales,
	CONCAT(ROUND(CAST(Total_Sales AS FLOAT) / SUM(Total_Sales) OVER () * 100, 2), '%') AS Percent_of_Total
FROM Category_Sales
ORDER BY Total_Sales DESC;


------ 🧩 Data Segmentation ------

-- 🪓 Segment products by cost range and count how many fall into each bucket
WITH Segments AS (
	SELECT 
		Product_key,
		Product_name,
		Cost,
		CASE 
			WHEN Cost < 100 THEN 'Below 100'
			WHEN Cost BETWEEN 100 AND 500 THEN '100-500'
			WHEN Cost BETWEEN 500 AND 1000 THEN '500-1000'
			ELSE 'Above 1000'
		END AS Cost_range
	FROM gold.dim_products
)
SELECT 
	Cost_range,
	COUNT(Product_key) AS Total_products
FROM Segments
GROUP BY Cost_range
ORDER BY Total_products DESC;

-- 👥 Segment customers based on tenure and spending habits
WITH Customer_Behaviour AS (
	SELECT 
		c.Customer_key,
		SUM(f.Sales) AS Total_Spending,
		MIN(Order_date) AS First_Order,
		MAX(Order_date) AS Last_Order,
		DATEDIFF(MONTH, MIN(Order_date), MAX(Order_date)) AS Customer_Since_Months
	FROM gold.dim_customers c
	LEFT JOIN gold.fact_sales f ON c.Customer_key = f.Customer_key
	GROUP BY c.Customer_key
)
SELECT
	Customer_Segment,
	COUNT(Customer_key) AS Number_Customers
FROM (
	SELECT 
		Customer_key,
		Total_Spending,
		Customer_Since_Months,
		CASE 
			WHEN Customer_Since_Months >= 12 AND Total_Spending > 5000 THEN 'VIP'
			WHEN Customer_Since_Months >= 12 AND Total_Spending <= 5000 THEN 'Regular'
			ELSE 'New'
		END AS Customer_Segment
	FROM Customer_Behaviour
) t
GROUP BY Customer_Segment
ORDER BY Number_Customers DESC;
GO


------ 📄 Creating Customer Report View ------

-- 🎯 Create a unified customer analytics report combining orders, sales, age, tenure, recency, and segmentation
CREATE VIEW gold.customer_report AS

WITH Base_query AS (
	SELECT
		f.Order_number,
		f.Product_key,
		f.Order_date,
		f.Quantity,
		f.Sales,
		c.Customer_key,
		c.Customer_number,
		CONCAT(c.First_name, ' ', c.Last_name) AS Customer_name,
		DATEDIFF(YEAR, c.Birthdate, GETDATE()) AS Age
	FROM gold.fact_sales f
	LEFT JOIN gold.dim_customers c ON c.Customer_key = f.Customer_key
	WHERE Order_date IS NOT NULL
),

Customer_aggregation AS (
	SELECT
		Customer_key,
		Customer_name,
		Customer_number,
		Age,
		COUNT(DISTINCT Order_number) AS Total_orders,
		SUM(Sales) AS Total_Sales,
		SUM(Quantity) AS Total_Quantity,
		COUNT(DISTINCT Product_key) AS Total_Products,
		MAX(Order_date) AS Last_Order_date,
		DATEDIFF(MONTH, MIN(Order_date), MAX(Order_date)) AS Customer_Since_Months
	FROM Base_query
	GROUP BY Customer_key, Customer_name, Customer_number, Age
)

SELECT
	Customer_name,
	Customer_number,
	Customer_key,
	Age,
	-- Group age into brackets
	CASE 
		WHEN Age < 20 THEN 'Under 20'
		WHEN Age BETWEEN 20 AND 29 THEN '20-29'
		WHEN Age BETWEEN 30 AND 39 THEN '30-39'
		ELSE '40 and Above'
	END AS Age_Bracket,
	-- Segment customers by loyalty/spending
	CASE 
		WHEN Customer_Since_Months >= 12 AND Total_Sales > 5000 THEN 'VIP'
		WHEN Customer_Since_Months >= 12 AND Total_Sales <= 5000 THEN 'Regular'
		ELSE 'New'
	END AS Customer_Segment,
	Total_orders,
	Total_Sales,
	Total_Quantity,
	Total_Products,
	Last_Order_date,
	Customer_Since_Months,
	DATEDIFF(MONTH, Last_Order_date, GETDATE()) AS Order_recency,
	-- Calculate average order value
	CASE 
		WHEN Total_orders = 0 THEN 0
		ELSE Total_Sales / Total_orders
	END AS Average_Order
FROM Customer_aggregation;

-- 🧾 View the final report
SELECT * FROM gold.customer_report;
GO

