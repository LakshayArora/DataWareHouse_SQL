/*
====================================================
Author       : Lakshay Arora
Description  : 
  Stored procedure to load and transform data from 
  the Bronze layer to the Silver layer in a 
  Data Lakehouse architecture.

  Operations include:
    - Truncating target Silver tables
    - Inserting cleaned and standardized data from 
      Bronze tables
    - Logging transformation load durations
    - Capturing runtime error details using TRY-CATCH

  SQL Concepts:
    - DML: INSERT, TRUNCATE
    - Window Functions: ROW_NUMBER, LEAD
    - Error Handling: TRY...CATCH
    - String and Date Functions for data cleansing

Usage:
  EXEC silver.load_silver;

Target Tables:
  - silver.crm_cust_info
  - silver.crm_prd_info
  - silver.crm_sales_details
  - silver.erp_cust_az12
  - silver.erp_loc_a101
  - silver.erp_px_cat_g1v2
====================================================
*/



-- ========================================
-- ðŸ¥ˆ Procedure: silver.load_silver
-- ðŸ“¦ Purpose: Load and transform data from Bronze to Silver layer
-- âœ¨ Includes data cleaning, standardization, and business rule logic
-- ========================================
CREATE OR ALTER PROCEDURE silver.load_silver AS
BEGIN
	DECLARE @start_time DATETIME,
			@end_time DATETIME,
			@total_start DATETIME,
			@total_end DATETIME

	BEGIN TRY
		-- Track overall start time
		SET @total_start = GETDATE();

		PRINT '===================================================='
		PRINT 'Loading Silver Layer'
		PRINT '===================================================='

		-- ========================================
		-- ðŸ§¹ Load and clean CRM Customer Info
		-- ========================================
		PRINT CHAR(13) + CHAR(10);
		PRINT '----------------------------------------------------'
		PRINT 'Loading CRM Tables'
		PRINT '----------------------------------------------------'

		SET @start_time = GETDATE();

		PRINT '>> Truncating Table: silver.crm_cust_info'
		TRUNCATE TABLE silver.crm_cust_info;

		PRINT '>> Inserting Data into: silver.crm_cust_info'
		INSERT INTO silver.crm_cust_info (
			cst_id, cst_key, cst_firstname, cst_lastname,
			cst_marital_status, cst_gender, cst_date
		)
		SELECT
			cst_id,
			cst_key,
			TRIM(cst_firstname),
			TRIM(cst_lastname),
			-- Map marital status codes to readable values
			CASE 
				WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
				WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'
				ELSE 'n/a'
			END,
			-- Standardize gender values
			CASE 
				WHEN UPPER(TRIM(cst_gender)) = 'F' THEN 'Female'
				WHEN UPPER(TRIM(cst_gender)) = 'M' THEN 'Male'
				ELSE 'n/a'
			END,
			cst_date
		FROM (
			-- Use latest record per customer ID
			SELECT *, ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_date DESC) AS flag
			FROM Bronze.crm_cust_info
		) t
		WHERE flag = 1 AND cst_id IS NOT NULL;

		SET @end_time = GETDATE();
		PRINT CHAR(13) + CHAR(10);
		PRINT '>> Load Time: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds'


		-- ========================================
		-- ðŸ§¹ Load and clean CRM Product Info
		-- ========================================
		SET @start_time = GETDATE();
		PRINT '>> Truncating Table: silver.crm_prd_info'
		TRUNCATE TABLE silver.crm_prd_info;

		PRINT '>> Inserting Data into: silver.crm_prd_info'
		INSERT INTO silver.crm_prd_info (
			prd_id, cat_id, prd_key, prd_nm, prd_cost, prd_line, prd_start_dt, prd_end_dt
		)
		SELECT
			prd_id,
			REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_') AS cat_id,     -- Derive category ID
			SUBSTRING(prd_key, 7, LEN(prd_key)) AS prd_key,
			prd_nm,
			COALESCE(prd_cost, 0) AS prd_cost,
			-- Map product line codes to descriptions
			CASE UPPER(TRIM(prd_line))
				WHEN 'M' THEN 'Mountain'
				WHEN 'R' THEN 'Road'
				WHEN 'S' THEN 'Other Sales'
				WHEN 'T' THEN 'Touring'
				ELSE 'n/a'
			END,
			CAST(prd_start_dt AS DATE),
			CAST(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt) - 1 AS DATE) AS prd_end_dt
		FROM bronze.crm_prd_info;

		SET @end_time = GETDATE();
		PRINT CHAR(13) + CHAR(10);
		PRINT '>> Load Time: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds'


		-- ========================================
		-- ðŸ§¹ Load and clean CRM Sales Details
		-- ========================================
		SET @start_time = GETDATE();
		PRINT '>> Truncating Table: silver.crm_sales_details'
		TRUNCATE TABLE silver.crm_sales_details;

		PRINT '>> Inserting Data into: silver.crm_sales_details'
		INSERT INTO silver.crm_sales_details (
			sls_ord_num, sls_prd_key, sls_cust_id,
			sls_order_dt, sls_ship_dt, sls_due_dt,
			sls_sales, sls_price, sls_quantity
		)
		SELECT
			sls_ord_num,
			sls_prd_key,
			sls_cust_id,
			-- Parse 8-digit int dates to proper format
			CASE WHEN sls_order_dt = 0 OR LEN(sls_order_dt) != 8 THEN NULL
				 ELSE CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)
			END,
			CASE WHEN sls_ship_dt = 0 OR LEN(sls_ship_dt) != 8 THEN NULL
				 ELSE CAST(CAST(sls_ship_dt AS VARCHAR) AS DATE)
			END,
			CASE WHEN sls_due_dt = 0 OR LEN(sls_due_dt) != 8 THEN NULL
				 ELSE CAST(CAST(sls_due_dt AS VARCHAR) AS DATE)
			END,
			-- Validate sales amount: calculate if missing or incorrect
			CASE 
				WHEN sls_sales IS NULL OR sls_sales <= 0 OR sls_sales != sls_quantity * ABS(sls_price)
					THEN sls_quantity * sls_price
				ELSE sls_sales
			END,
			-- Validate unit price
			CASE 
				WHEN sls_price IS NULL OR sls_price <= 0 
					THEN sls_sales / NULLIF(sls_quantity, 0)
				ELSE sls_price
			END,
			sls_quantity
		FROM bronze.crm_sales_details;

		SET @end_time = GETDATE();
		PRINT CHAR(13) + CHAR(10);
		PRINT '>> Load Time: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds'


		-- ========================================
		-- ðŸ§¹ Load ERP Customer Demographics
		-- ========================================
		SET @start_time = GETDATE();
		PRINT CHAR(13) + CHAR(10);
		PRINT '----------------------------------------------------'
		PRINT 'Loading ERP Tables'
		PRINT '----------------------------------------------------'

		PRINT '>> Truncating Table: silver.erp_cust_az12'
		TRUNCATE TABLE silver.erp_cust_az12;

		PRINT '>> Inserting Data into: silver.erp_cust_az12'
		INSERT INTO silver.erp_cust_az12 (cid, bdate, gen)
		SELECT
			-- Remove prefix from customer ID if it starts with 'NAS'
			CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid))
				 ELSE cid
			END,
			-- Discard future birthdates
			CASE WHEN bdate > GETDATE() THEN NULL
				 ELSE bdate
			END,
			-- Normalize gender values
			CASE 
				WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female'
				WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male'
				ELSE 'n/a'
			END
		FROM bronze.erp_cust_az12;

		SET @end_time = GETDATE();
		PRINT CHAR(13) + CHAR(10);
		PRINT '>> Load Time: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds'


		-- ========================================
		-- ðŸ§¹ Load ERP Location Data
		-- ========================================
		SET @start_time = GETDATE();
		PRINT '>> Truncating Table: silver.erp_loc_a101'
		TRUNCATE TABLE silver.erp_loc_a101;

		PRINT '>> Inserting Data Into: silver.erp_loc_a101'
		INSERT INTO silver.erp_loc_a101 (cid, cntry)
		SELECT
			REPLACE(cid, '-', '') AS cid,
			-- Standardize country codes
			CASE 
				WHEN TRIM(cntry) = 'DE' THEN 'Germany'
				WHEN TRIM(cntry) IN ('US', 'USA') THEN 'United States'
				WHEN TRIM(cntry) = '' OR TRIM(cntry) IS NULL THEN 'n/a'
				ELSE TRIM(cntry)
			END
		FROM bronze.erp_loc_a101;

		SET @end_time = GETDATE();
		PRINT CHAR(13) + CHAR(10);
		PRINT '>> Load Time: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds'


		-- ========================================
		-- ðŸ§¹ Load ERP Product Category Mapping
		-- ========================================
		SET @start_time = GETDATE();
		PRINT '>> Truncating Table: silver.erp_px_cat_g1v2'
		TRUNCATE TABLE silver.erp_px_cat_g1v2;

		PRINT '>> Inserting Data into: silver.erp_px_cat_g1v2'
		INSERT INTO silver.erp_px_cat_g1v2 (id, cat, subcat, maintainance)
		SELECT id, cat, subcat, maintainance
		FROM bronze.erp_px_cat_g1v2;

		SET @end_time = GETDATE();
		PRINT CHAR(13) + CHAR(10);
		PRINT '>> Load Time: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds'


		-- âœ… Final Total ETL Time
		SET @total_end = GETDATE();
		PRINT CHAR(13) + CHAR(10);
		PRINT '>> Total Load Time: ' + CAST(DATEDIFF(SECOND, @total_start, @total_end) AS NVARCHAR) + ' seconds'

	END TRY

	BEGIN CATCH
		-- ðŸ”´ Log errors with full context
		PRINT '====================================='
		PRINT 'Error Occurred During Loading Silver Layer'
		PRINT 'Error Message: ' + ERROR_MESSAGE()
		PRINT 'Error Number: ' + CAST(ERROR_NUMBER() AS NVARCHAR)
		PRINT 'Error Line: ' + CAST(ERROR_LINE() AS NVARCHAR)
		PRINT 'Error State: ' + CAST(ERROR_STATE() AS NVARCHAR)
	END CATCH
END
GO
